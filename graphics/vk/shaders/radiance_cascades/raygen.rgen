#version 460
#extension GL_EXT_ray_tracing : require

struct Payload {
    vec3 hitValue;
    int lightingType; // 0 for direct, 1 for indirect
    int bounces;
};

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform writeonly image2D outputImage;

layout(location = 0) rayPayloadEXT Payload hitPayload;

layout(push_constant) uniform PushConstants {
    mat4 viewInverse;
    mat4 projectionInverse;
} pc;

const uint rayFlags = gl_RayFlagsOpaqueEXT;
const uint cullMask = 0xFF;
const float tMin = 0.001;
const float tMax = 10000.0;
const int payloadLocation = 0;

void main() {
    const vec2 uv = (gl_LaunchIDEXT.xy + 0.5) / gl_LaunchSizeEXT.xy;

    vec4 origin = pc.viewInverse * vec4(0, 0, 0, 1.0); // Camera origin
    vec4 target = pc.projectionInverse * vec4(uv * 2.0 - 1.0, 1.0, 1.0); // Target point in world space
    vec4 direction = pc.viewInverse * vec4(normalize(target.xyz), 0.0); // Ray direction in world space

    hitPayload = Payload(vec3(0.0), 0, 1);
    traceRayEXT(topLevelAS,
                rayFlags,
                cullMask,
                0,
                0,
                0,
                origin.xyz,
                tMin,
                direction.xyz,
                tMax,
                payloadLocation);

    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(hitPayload.hitValue, 1.0));
}