#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require

#include "tiled_shading.glsl"

#define LOCAL_SIZE_X 1
#define LOCAL_SIZE_Y 1
#define LOCAL_SIZE_Z 24

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

layout(set = 0, binding = 0) buffer readonly lightUniform {
    uint lightCount;
    Light lights[];
};

layout(std430, set = 0, binding = 1) restrict buffer visibleLightBuffer {
    FrustumAABB frustumAABB;
    LightVisibility visibleLightIndices[];
};

layout(set = 0, binding = 2) buffer writeonly lightCountUniform {
    uint16_t visibleLightCount[MAX_LIGHTS_VISIBLE];
};

layout(push_constant) uniform PushConstants {
    mat4 viewMatrix;
} pushConstants;

bool SphereAABBIntersection(vec4 sphere, float16_t radius, vec3 aabbMin, vec3 aabbMax) {
    vec3 closestPointInAabb = clamp(sphere.xyz, aabbMin, aabbMax);
    vec3 distance = sphere.xyz - closestPointInAabb;
    return dot(distance, distance) <= radius * radius;
}

void main() {
    uint tileIndex = (gl_WorkGroupID.z * LOCAL_SIZE_Z + gl_LocalInvocationID.z) * gl_NumWorkGroups.x * LOCAL_SIZE_X * gl_NumWorkGroups.y * LOCAL_SIZE_Y
                   + (gl_WorkGroupID.y * LOCAL_SIZE_Y + gl_LocalInvocationID.y) * gl_NumWorkGroups.x * LOCAL_SIZE_X
                   + (gl_WorkGroupID.x * LOCAL_SIZE_X + gl_LocalInvocationID.x);

    LightVisibility visibleLightIndex;

    uint16_t count = uint16_t(0);

    for (uint i = 0; i < lightCount; i++) {
        f16vec4 lightPosition = lights[i].position;

        bool intersects = SphereAABBIntersection(pushConstants.viewMatrix * vec4(lightPosition.xyz, 1.0f), lightPosition.w, frustumAABB.minPoint.xyz, frustumAABB.maxPoint.xyz);

        visibleLightIndex.indices[count] = uint16_t(mix(visibleLightIndex.indices[count], i, intersects));
        count += uint16_t(intersects);
    }

    visibleLightCount[tileIndex] = count;
    visibleLightIndices[tileIndex] = visibleLightIndex;
}